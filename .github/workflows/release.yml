name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.0.0)"
        required: true
        type: string
      draft:
        description: "Create as draft release"
        required: false
        type: boolean
        default: false
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build - ${{ matrix.platform.os_name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # 如果你不需要某个平台，直接删除对应的配置块即可
          - os_name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc

          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin

          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - name: Get project name from Cargo.toml
        id: project
        shell: bash
        run: |
          PROJECT_NAME=$(grep '^name = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "Project name: $PROJECT_NAME"

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.platform.target }}

      - name: Package (Unix)
        if: matrix.platform.os != 'windows-latest'
        shell: bash
        run: |
          BIN_NAME="${{ steps.project.outputs.name }}"
          ARCHIVE_NAME="${BIN_NAME}-${{ matrix.platform.os_name }}.tar.gz"
          cd target/${{ matrix.platform.target }}/release
          tar czvf ../../../${ARCHIVE_NAME} ${BIN_NAME}
          cd -
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Package (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: bash
        run: |
          BIN_NAME="${{ steps.project.outputs.name }}.exe"
          ARCHIVE_NAME="${{ steps.project.outputs.name }}-${{ matrix.platform.os_name }}.zip"
          cd target/${{ matrix.platform.target }}/release
          7z a ../../../${ARCHIVE_NAME} ${BIN_NAME}
          cd -
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.os_name }}
          path: ${{ env.ARCHIVE_NAME }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ github.event.inputs.prerelease || false }}
          files: |
            artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
